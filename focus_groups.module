<?php
// $ID$

/**
 * Implements hook_perm().
 */
function focus_groups_perm() {
	return array(
		'view focus groups',
		'view focus group colors'
	);
}

/**
 * Implements hook_views_api().
 * @return array with Views API version.
 */
function focus_groups_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'focus_groups'),
  );
}

/**
 * Implements hook_block().
 * Adds the following custom blocks:
 *  - Balance Group Menu: shows my groups
 *
 * @param string $op
 * @param int $delta
 * @param array $edit
 * @return string
 */
function focus_groups_block($op = 'list', $delta = 0, $edit = array()) {
	
	switch ($op) {
		case 'list':
			$blocks[0]['info'] = t('Balance Gruppenmenü', NULL, 'de');
			return $blocks;

		case 'view':
			switch($delta) {
				case 0:
					$block['subject'] = t('Gruppen', NULL, 'de');
					$block['content'] = focus_groups_block_my_groups();
				break;
			}

			return $block;
	}
}

function focus_groups_block_my_groups() {
	$url = arg();
	if($url[0] = 'user' && is_numeric($url[1])) {
		$uid = $url[1];
	} else {
		global $user;
		$uid = $user->uid;
	}
	$groups = og_get_subscriptions($uid, 0);
	if($groups) {
		return phptemplate_group_list(focus_groups_load_group_details($groups));
	} else {
		return '<p>' . t('Sie sind in keiner Gruppe angemeldet', NULL, 'de') . '</p>';
	}
}

/**
 * Overrides or inserts variables into the node templates.
 *
 * set node_classes (same as body_classes) for nodes (e.g. post teasers on the front page)
 * @todo merge with focus_groups_load_group_details
 * @param array $vars
 */
function focus_groups_preprocess_node(&$vars, $hook) {	
	$vars['related_groups'] = array();
	$vars['focusgroup'] = array();
	$node_classes_group_ids = array();
	$focus_group_ids = array();

	if(isset($vars['og_groups']) && $group_ids = $vars['og_groups']) {
		foreach($group_ids as $nid) {
			$group = node_load($nid);

			if($group->type == 'focusgroup' && user_access('view focus groups')) {
				$focus_group_ids[] = $group->field_fgnumber[0]['value'];
				$node_classes_group_ids[] = $nid;
				$vars['focusgroups'][] = $group;
			}

			// if($group->type == 'project') {
			// 	$node_classes_group_ids[] = $nid;
			// 	$vars['projects'][] = $group;
			// }
		}
	}
	if($node_classes_group_ids) {
		$vars['node_classes'] = 'og-context-' . implode(' og-context-', $node_classes_group_ids);
	}

	if(!empty($focus_group_ids) && user_access('view focus group colors')) {
		$vars['node_classes'] .= ' fg' . implode(' fg', $focus_group_ids);
	}
}

/**
 * Loads CSS classes and related groups depending on node type
 *
 * @param array $vars
 */
function focus_groups_preprocess_page(&$vars) {
	$url = arg();
	$related_groups = array();
	$vars['fg'] = FALSE;

	if($url[0] != 'user') {
		if(!isset($vars['node'])) {
			// node needed for og context and colors
			if($url[0] == 'node' && $url[1] == 'add' && $nodeIds = $_GET['gids']) {
				// load node for node/add/blog?gids[]=31 links
				$nodeId = reset(explode(',', reset($nodeIds)));
			} elseif(!isset($vars['node']) && isset($url[1]) && is_numeric($url[1])) { // on settings pages we don't have nodes
				// todo why don't nodes load on e.g. node/31/team
				$nodeId = $url[1];
			}
      
      if(isset($nodeId)) {
  			$vars['node'] = node_load($nodeId);
      }
		}

    if(isset($vars['node'])) {			
  		switch($vars['node']->type) {
  			case 'project':
  				// load parent = focusgroup for block in right sidebar
  				$vars['parent'] = node_load(focus_groups_get_parent($vars['node']->nid));
          $vars['fg'] = focus_groups_get_focus_group($vars['parent']->nid);
  			break;

  			case 'focusgroup':
  				if(!user_access('view focus groups')) {
  					drupal_goto('/');
  				}

        	// load color for focus group
  				$vars['fg'] = focus_groups_get_focus_group($vars['node']->nid);
  			break;

				case 'blog':
				case 'event':
					$vars['related_groups'] = focus_groups_load_group_details($vars['node']->og_groups);
				break;
  		}

			// load color for nodes which belong to a project
    	// add proprietary focusgroup short to color a page
      if(!$vars['fg'] && isset($vars['node']->og_groups)) {
        $vars['fg'] = focus_groups_get_focus_group($vars['node']->og_groups);
      }
      
      if($vars['fg']) {
        $vars['body_classes'] .= ' fg' . $vars['fg']->field_fgnumber_value;
      }
    }
	} elseif($url[0] == 'user' && !in_array($url[1], array('register', 'password'))) {
		// user page
		$profile = user_load($url[1]);
		$vars['related_groups'] = focus_groups_load_group_details($profile->og_groups);
	}

	// add node id as args to a tab because the exhibit module uses it for arguments in their views. this is a horrible implementation but i think it's the only way which can be done efficiently.
	$vars['tabs'] = str_replace('/publications"', '/publications?args=' . $vars['node']->nid . '"', $vars['tabs']);
}

/**
 * Get the parent of the given node. Extends nodehierachy module which hasn't this functionality
 *
 * @uses nodehierarchy module
 * @param int $nid
 *   Node id of a child node
 * @return int
 *   Node id of the parent node
 */
function focus_groups_get_parent($nid) {
	static $parent;
	$nid = (int)$nid;
	
	if(!isset($parent[$nid])) {
		$parent[$nid] = (int)db_result(db_query("SELECT h.parent FROM {nodehierarchy} h WHERE h.nid = %d", $nid));
	}

	return $parent[$nid];
}

/**
 * Gets the focusgroup out of a bunch of groups
 *
 * First looks up if one of the given groups is a focusgroup (i.e. is a parent of a group).
 * Then gives back the cck field value of fgident.
 * Used because we want to declare focusgroups by numbers from 1-8, not by their group id.
 *
 * @uses nodehierarchy module
 * @param mixed $gids
 *   One or more group ids
 * @return array
 *   used for css classes, e.g. "fg1"
 */
function focus_groups_get_focus_group($gids) {
  $gids = (array)$gids;
  
	if(count($gids) === 0 || !user_access('view focus group colors')) {
		return FALSE;
	}
	$query = "SELECT * FROM {content_type_focusgroup}
		WHERE nid =	(SELECT parent FROM {nodehierarchy} WHERE nid IN (" . db_placeholders($gids, 'int') . ") LIMIT 1)
		OR nid IN (" . db_placeholders($gids, 'int') . ")";

	$result = db_query($query, array_merge($gids, $gids));

	return db_fetch_object($result);
}

/**
 * Implements hook_menu()
 *
 * @todo instead of using view paths hardcode wiki, team and downloads
 * @return array
 */
function focus_groups_menu() {
	$items['node/%node/info'] = array(
		'title' => 'Info',
		'type' => MENU_LOCAL_TASK,
		'page callback' => 'focus_groups_info_tab_call_back',
		'page arguments' => array(1),
		'access callback' => 'focus_groups_is_project', // We use the access callback to show additional tabs only on project content types
		'access arguments' => array(1),
	);

	$items['node/%node/publications'] = array(
		'title' => 'Publikationen',
		'type' => MENU_LOCAL_TASK,
		'page callback' => 'focus_groups_publications_tab_call_back',
		'page arguments' => array(1),
		'access callback' => 'focus_groups_is_project',
		'access arguments' => array(1),
	);

	$items['user/%user/publications'] = array(
		'title' => 'Publikationen',
		'type' => MENU_LOCAL_TASK,
		'page callback' => 'focus_groups_publications_tab_call_back',
		'page arguments' => array(1),
		'access callback' => 'focus_groups_is_project',
		'access arguments' => array(1),
	);

	return $items;
}

/**
 * Implements hook_menu_alter
 */
function focus_groups_menu_alter(&$items) {
	unset($items['node/%node/broadcast']); // remove og broadcast
	unset($items['user/%user/messagelog']); // remove messaging log
}

/**
 * Implements hook_og_links_alter
 * Modifies the group details block
 *
 * @param array $links
 */
function focus_groups_og_links_alter(&$links, $node) {
	global $user;
	$unset = array('subscribers', 'subscribe');
	foreach($unset as $u) {
		if(isset($links[$u])) {
			unset($links[$u]);
		}
	}

	if(strpos($links['my_membership'], '/og/subscribe') !== false) {
		unset($links['my_membership']); // 'my_membership' contains the subscription link which we don't want, but also the my user page which we want. So we only delete the first.
	}

  if (isset($user->og_groups[$node->nid]) && ($user->og_groups[$node->nid]['is_admin'] == 1)) {
    // Adds link to the user management to approve and decline membership requests
    $links['users'] = l(t('Manage Users'), 'og/users/' . $node->nid);
    $links['edit'] = l(t('Edit'), 'node/' . $node->nid . '/edit');
  }
}

/**
 * Checks if the given node is a project or focusgroup content type
 *
 * @param object $node
 * @return bool
 */
function focus_groups_is_project($node) {
	if (in_array($node->type, array('project', 'focusgroup', 'workshop', 'conftoolgroup'))) {
		return TRUE;
	} else {
		return FALSE;
	}
}

/**
 * Page callback function for info tab menu item
 *
 * @param array $node
 * @return string
 */
function focus_groups_info_tab_call_back($node) {
 	return node_view($node, $teaser = FALSE, $page = FALSE, $links = TRUE);
}

/**
 * Page callback function for publications tab menu item
 *
 * @return string
 */
function focus_groups_publications_tab_call_back($node) {
	if(!empty($_GET['args'])) {
		$exhibitArgumentsUrl = 'publications-exhibit-groups';
		$nid = arg(1, drupal_get_normal_path($exhibitArgumentsUrl));
	  return node_view(node_load($nid));
	} else {
		return '<p><em>' . t('Es sind noch keine Publikationen in dieser Gruppe veröffentlicht.', NULL, 'de') . '</em></p>';
	}
}

/**
 * Loads group nodes
 *
 * @param array $groups
 * @param bool $logged_in
 * @return array
 */
function focus_groups_load_group_details($groups) {
	$return_groups = array();

	if($groups) {
		foreach($groups as $nid => $g) {
			$current_group = node_load($nid);

			if($current_group->type == 'focusgroup' && !user_access('view focus groups')) {
				continue;
			}

			if(isset($g['is_active'])) { // when given an user->og_groups array, we populate the group node with the context info
				$current_group->user_is_active = $g['is_active'];
			}

			$return_groups[$current_group->nid] = $current_group;
		}
	}

	return $return_groups;
}

function focus_groups_form_alter(&$form, &$form_state, $form_id){
  switch($form_id){
    case 'blog_node_form':
      $form['field_coautors']['field_coautors_add_more']['#value'] = t('Weitere Autoren hinzufügen', NULL, 'de');
		break;

		case 'project_node_form':
			unset($form['buttons']['preview']);
			unset($form['buttons']['preview_changes']);
		break;

		case 'user_register':
			foreach($form['og_register']['og_register']['#options'] as $nid => &$name) {
				if($node = node_load($nid)) {
					if($node->field_projectlogo && ($node->field_projectlogo[0]['filepath'] !== null)) {
						$path = $node->field_projectlogo[0]['filepath'];
					} else {
						$path = file_directory_path() . '/logos/Balance-Logo_30.png';
					}
				}
				$name = theme('imagecache', 'projectlogo_1-2c', $path) . ' ' . $name;
			}
		break;

		case 'comment_form':
			// don't show the preview button if preview is optional
			if(isset($form['submit'])) {
				unset($form['preview']);
			}
		break;
  }
}
